// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ServiceDeployment extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'k8sapp:index:ServiceDeployment';

    /**
     * Returns true if the given object is an instance of ServiceDeployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceDeployment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceDeployment.__pulumiType;
    }

    /**
     * Frontend IP address.
     */
    public /*out*/ readonly frontendIp!: pulumi.Output<string>;

    /**
     * Create a ServiceDeployment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceDeploymentArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.image === undefined) && !opts.urn) {
                throw new Error("Missing required property 'image'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            resourceInputs["allocationIpAddress"] = args ? args.allocationIpAddress : undefined;
            resourceInputs["image"] = args ? args.image : undefined;
            resourceInputs["isMinikube"] = args ? args.isMinikube : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["ports"] = args ? args.ports : undefined;
            resourceInputs["replicas"] = args ? args.replicas : undefined;
            resourceInputs["resources"] = args ? args.resources : undefined;
            resourceInputs["frontendIp"] = undefined /*out*/;
        } else {
            resourceInputs["frontendIp"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceDeployment.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a ServiceDeployment resource.
 */
export interface ServiceDeploymentArgs {
    /**
     * Allocate an IP address for the service.
     */
    allocationIpAddress?: pulumi.Input<boolean>;
    /**
     * Docker image to deploy.
     */
    image: pulumi.Input<string>;
    /**
     * Using minikube.
     */
    isMinikube?: pulumi.Input<boolean>;
    /**
     * K8s namespace in which to deploy.
     */
    namespace: pulumi.Input<string>;
    /**
     * Container ports.
     */
    ports?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Number of replicas to deploy.
     */
    replicas?: pulumi.Input<number>;
    /**
     * Resource requirements for the container.
     */
    resources?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
